[
  {
    "id": "648811cb3e68b0f7",
    "type": "inject",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 90,
    "y": 460,
    "wires": [
      [
        "cb7e19f416e51469"
      ]
    ]
  },
  {
    "id": "cb7e19f416e51469",
    "type": "function",
    "name": "SQL Query Handler",
    "func": "const currentTimestamp =  new Date();\n\nconst currentDay = String(currentTimestamp.getDate()).padStart(2, '0');\nconst currentMonth = String(currentTimestamp.getMonth()+1).padStart(2,\"0\");\nconst currentYear = currentTimestamp.getFullYear();\n\nconst currentHours = currentTimestamp.getHours() < 10 ? '0' + currentTimestamp.getHours() : currentTimestamp.getHours();\nconst currentMinutes = currentTimestamp.getMinutes() < 10 ? '0' + currentTimestamp.getMinutes() : currentTimestamp.getMinutes();\nconst currentSeconds = currentTimestamp.getSeconds() < 10 ? '0' + currentTimestamp.getSeconds() : currentTimestamp.getSeconds();\n\nconst currentDate = `${currentYear}-${currentMonth}-${currentDay} ${currentHours}:${currentMinutes}:${currentSeconds}`;\n\nlet previousTimestamp = new Date()\nconst timeThreshold = TIME_THRESHOLD;\n\npreviousTimestamp.setMinutes(currentTimestamp.getMinutes() - timeThreshold)\n\nconst previousDay = String(previousTimestamp.getDate()).padStart(2, '0');\nconst previousMonth = String(previousTimestamp.getMonth() + 1).padStart(2, \"0\");\nconst previousYear = previousTimestamp.getFullYear();\n\nconst previousHours = previousTimestamp.getHours() < 10 ? '0' + previousTimestamp.getHours() : previousTimestamp.getHours();\nconst previousMinutes = previousTimestamp.getMinutes() < 10 ? '0' + previousTimestamp.getMinutes() : previousTimestamp.getMinutes();\nconst previousSeconds = previousTimestamp.getSeconds() < 10 ? '0' + previousTimestamp.getSeconds() : previousTimestamp.getSeconds();;\n\nconst previousDate = `${previousYear}-${previousMonth}-${previousDay} ${previousHours}:${previousMinutes}:${previousSeconds}`;\n\nconst query = `SELECT heartrate, datetime\n               FROM heartrate\n               WHERE datetime > '${previousDate}'\n                 AND datetime < '${currentDate}'\n               ORDER BY datetime`\n\nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 1,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 310,
    "y": 460,
    "wires": [
      [
        "e5ec8b01893efc15"
      ]
    ]
  },
  {
    "id": "e5ec8b01893efc15",
    "type": "sqlite",
    "mydb": "MYDB_ID",
    "sqlquery": "msg.topic",
    "sql": "",
    "name": "Home Gateway Database",
    "x": 430,
    "y": 520,
    "wires": [
      [
        "22524c3a9a026312",
        "6c0ffbeb3c7891ff"
      ]
    ]
  },
  {
    "id": "dbe1a6e1e5d60372",
    "type": "debug",
    "name": "Service Message",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1130,
    "y": 620,
    "wires": []
  },
  {
    "id": "22524c3a9a026312",
    "type": "function",
    "name": "Query Result Handler",
    "func": "if (msg.payload.length === 0){\n    msg.payload = 'no data';\n    return msg;\n}\nlet hrData = msg.payload;\nlet startTime = null;\nlet endTime = null;\n\nmsg.payload = false;\nconst hrThreshold = HR_THRESHOLD;\nconst timeThreshold = TIME_THRESHOLD;\n\nfor (const entry of hrData) {\n    const datetime = new Date(entry.datetime);\n    const heartrate = entry.heartrate;\n    if (heartrate <= hrThreshold) {\n        if (startTime === null) {\n            startTime = datetime;\n        }\n        endTime = datetime;\n    } else {\n        startTime = null;\n        endTime = null;\n        msg.reset = ''\n    }\n    let diff = endTime - startTime;\n        if (endTime && diff >= timeThreshold * 60 * 1000) {\n        msg.payload = true\n    }\n}\n\nmsg.topic = ''\n\n\nreturn msg;",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 480,
    "y": 580,
    "wires": [
      [
        "481821d536d44852"
      ]
    ]
  },
  {
    "id": "481821d536d44852",
    "type": "switch",
    "name": "Result Handler",
    "property": "highHr",
    "propertyType": "flow",
    "rules": [
      {
        "t": "true"
      },
      {
        "t": "false"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 700,
    "y": 580,
    "wires": [
      [
        "b77f99c33343d3d6"
      ],
      [
        "a6f2c88a723ca2eb"
      ]
    ]
  },
  {
    "id": "f2fa3bc2cb4234da",
    "type": "template",
    "name": "Trigger Message",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "Low Heartrate Alert!!!",
    "output": "str",
    "x": 1070,
    "y": 540,
    "wires": [
      [
        "dbe1a6e1e5d60372",
        "121f0e912724525a"
      ]
    ]
  },
  {
    "id": "a6f2c88a723ca2eb",
    "type": "template",
    "name": "All Ok Message",
    "field": "payload",
    "fieldType": "msg",
    "format": "handlebars",
    "syntax": "mustache",
    "template": "HeartRate Ok (Low Sleeping HeartRate Service)",
    "output": "str",
    "x": 900,
    "y": 620,
    "wires": [
      [
        "dbe1a6e1e5d60372"
      ]
    ]
  },
  {
    "id": "6c0ffbeb3c7891ff",
    "type": "debug",
    "name": "Query Result",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 690,
    "y": 520,
    "wires": []
  },
  {
    "id": "8654a7d22cf8654b",
    "type": "comment",
    "name": "Low Sleeping Heart Rate",
    "info": "",
    "x": 110,
    "y": 400,
    "wires": []
  },
  {
    "id": "f2532b6c18c334fe",
    "type": "inject",
    "name": "Table Creation",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "CREATE TABLE heartrate (id integer PRIMARY KEY AUTOINCREMENT,    heartrate VARCHAR(255) NULL,    datetime VARCHAR(255) NULL)",
    "payload": "",
    "payloadType": "date",
    "x": 100,
    "y": 520,
    "wires": [
      [
        "e5ec8b01893efc15"
      ]
    ]
  },
  {
    "id": "b77f99c33343d3d6",
    "type": "trigger",
    "name": "",
    "op1": "",
    "op2": "0",
    "op1type": "pay",
    "op2type": "str",
    "duration": "0",
    "extend": false,
    "overrideDelay": false,
    "units": "ms",
    "reset": "",
    "bytopic": "all",
    "topic": "topic",
    "outputs": 1,
    "x": 880,
    "y": 540,
    "wires": [
      [
        "f2fa3bc2cb4234da"
      ]
    ]
  },
  {
    "id": "121f0e912724525a",
    "type": "http request",
    "name": "Rhasspy TTS",
    "method": "POST",
    "ret": "txt",
    "paytoqs": "ignore",
    "url": "http://10.245.14.2:12101/api/text-to-speech",
    "tls": "",
    "persist": false,
    "proxy": "",
    "insecureHTTPParser": false,
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1320,
    "y": 540,
    "wires": [
      []
    ]
  }
]